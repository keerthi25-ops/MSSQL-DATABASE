---ONLINE LEARNING PLATFORM MANAGEMENT------------
CREATE DATABASE LEARNHUB;
USE LEARNHUB;
-------STUDENT TABLE------------
CREATE TABLE STUDENT(STDID INT PRIMARY KEY,NAME VARCHAR(20),COURSE VARCHAR(100),EMAIL VARCHAR(100) UNIQUE,REG_DATE DATE,
COUNTRY VARCHAR(20),STATE VARCHAR(30),PHONE BIGINT)
-------INSERT STUDENT TABLE---------------
INSERT INTO STUDENT VALUES(111,'RAHUL','DATA SCIENCE','rahulvs@gmail.com','2025-05-05','INDIA','UP',9870687549),
(112,'SANTHI','DATA ANALYTICS','santhim1404@gmail.com','2025-06-09','INDIA','TAMILNADU',8769054583),
(113,'KIRUBHA','DATA ANALYTICS','kirubhainbyc@gmail.com','2025-06-09','INDIA','TAMILNADU',9087890743),
(114,'LIZANA','WEB DEVELOPMENT','lizwiz3456@gmail.com','2024-11-28','INDIA','KERALA',6785901234),
(115,'VIHAAN','SQL','viwwwyou436@gmail.com','2025-07-11','INDIA','MAHARASTRA',6389734012),
(116,'KIARA','CLOUD','kiarakey55@gmail.com','2025-08-21','INDIA','RAJASTHAN',7489034569),
(117,'MADHAN','MACHINE LEARNING','maddyjo23@gmail.com','2024-09-16','INDIA','WEST BENGAL',9768017234),
(118,'BALA','DEVOPS','balanathan24898@gmail.com','2025-09-11','INDIA','TAMILNADU',8705678129),
(119,'NIVAS','SQL','nivassunil000@gmail.com','2025-10-01','INDIA','KARNATAKA',9942356701),
(120,'JASON','CYBER SECURITY','jasonvv22@gmail.com','2024-12-21','INDIA','ANDHRA',7708954631);
------------COURSE DETAILS-----------------
CREATE TABLE COURSE_DETAILS(C_ID INT PRIMARY KEY,COURSE VARCHAR(100),DURATION_MONTH INT,PRICE MONEY)
--------INSERT-------------------------------
INSERT INTO COURSE_DETAILS VALUES(1625,'DATA SCIENCE',8,50000),(1722,'CYBER SECURITY',10,75000),
(1520,'DATA ANALYTICS',5,40000),(1822,'WEB DEVELOPMENT',4,35000),(1666,'MACHINE LEARNING',7,50000),
(1622,'CLOUD',6,45000),(1870,'SQL',3,30000),(2211,'DEVOPS',4,40000),(1200,'PYTHON',4,35000)
CREATE TABLE FACULTIES(F_ID INT,F_NAME VARCHAR(30),
C_ID INT FOREIGN KEY(C_ID) REFERENCES COURSE_DETAILS(C_ID),RATINGS DECIMAL(3,2) CHECK(RATINGS<=5.00))
INSERT INTO FACULTIES VALUES(1,'VISHAL',1625,4),(2,'GOPINATH',1722,3.5),(3,'INDIRAN',1520,4.5),(4,'JACOB',1822,3.9),
(5,'NISAN',1666,4),(6,'BILAL',1622,4.5),(7,'MAHESH',1870,4),(8,'KANNAN',2211,4),(9,'KARTHIK',1870,4.5),
(10,'VIJAY',2211,3.75),(11,'SRAVAN',1200,4)
-----------------------ENROLLMENT------------------------
CREATE TABLE ENROLLMENT(E_ID VARCHAR(10) PRIMARY KEY,STDID INT FOREIGN KEY(STDID) REFERENCES STUDENT(STDID),
C_ID INT FOREIGN KEY(C_ID) REFERENCES COURSE_DETAILS(C_ID),STARTDATE DATE,COMPLETIONPERCENT DECIMAL(4,2),
STATUS VARCHAR(20),ISACTIVE CHAR(1))
----------------------------INSERT----------------------------------
INSERT INTO ENROLLMENT(E_ID,STDID,C_ID,STARTDATE,COMPLETIONPERCENT)VALUES('111R',111,1625,'2025-05-10',80),
('112S',112,1520,'2025-06-15',75),('113K',113,1520,'2025-06-15',60),('114L',114,1822,'2024-12-03',90),
('115V',115,1870,'2025-08-01',80),('116K',116,1622,'2025-09-02',70),('117M',117,1666,'2024-10-05',95),
('118B',118,2211,'2025-09-15',20),('119N',119,1870,'2025-10-15',30),('120J',120,1722,'2024-12-30',96)
--------------------UPDATE USING RELATIONAL OPERATOR-------------------------
UPDATE ENROLLMENT SET STATUS='COMPLETED' WHERE COMPLETIONPERCENT>=90
UPDATE ENROLLMENT SET STATUS='ON PROGRESS' WHERE COMPLETIONPERCENT<=90
UPDATE ENROLLMENT SET ISACTIVE=0 WHERE STATUS='COMPLETED'
UPDATE ENROLLMENT SET ISACTIVE=1 WHERE STATUS='ON PROGRESS'
------------------QUIZ----------------------------
CREATE TABLE QUIZ(QUIZID INT PRIMARY KEY,C_ID INT FOREIGN KEY(C_ID) REFERENCES COURSE_DETAILS(C_ID),TOT_MARKS INT)
---------------------INSERT---------------------------
INSERT INTO QUIZ VALUES(420,1625,100),(430,1722,100),(440,1520,100),(450,1822,100),(460,1666,100),
(470,1622,100),(480,1870,100),(490,2211,100),(500,1200,100)
----------------QUIZ ATTEMPT------------------------------
CREATE TABLE QUIZATTEMPT(ATTEMPTID INT PRIMARY KEY,QUIZID INT FOREIGN KEY(QUIZID) REFERENCES QUIZ(QUIZID),
STDID INT FOREIGN KEY(STDID) REFERENCES STUDENT(STDID),SCORE INT)
------------------------INSERT---------------------------------
INSERT INTO QUIZATTEMPT VALUES(311,420,111,95),(312,440,112,88),(313,440,113,90),(314,450,114,80),(
315,480,115,95),(316,470,116,80),(317,460,117,85),(318,490,118,90),(319,480,119,70),(320,430,120,65)
---------------------COURSE REVIEW------------------------------
CREATE TABLE COURSE_REVIEW(STDID INT FOREIGN KEY(STDID) REFERENCES STUDENT(STDID),C_ID INT FOREIGN KEY(C_ID) REFERENCES COURSE_DETAILS(C_ID),
REVIEW VARCHAR(200))
---------------------INSERT--------------------------------------------
INSERT INTO COURSE_REVIEW VALUES(111,1625,'DETAILED EXPLANATION FOR BEGINEERS'),(112,1520,'PERFECT COURSE'),
(113,1520,'VERY GOOD COURSE'),(114,1822,'COULD USE MORE EXAMPLES'),(115,1870,'VERY BASICS'),
(116,1622,'TEACH WELL'),(117,1666,'USEFUL FOR INTERMEDIATE LEVEL'),(118,2211,'GOOD'),(119,1870,'PERFECT'),
(120,1722,'CORE TEACHING')
------------------------ENROLLMENT_LOG----------------------------------
CREATE TABLE ENROLLMENT_LOG(E_ID INT,STDID INT,C_ID INT,ACTIONS VARCHAR(50),LOGDATE DATETIME DEFAULT GETDATE())
-------------------TRIGGER TO UPDATE ENROLLMENT LOG-------------------------
CREATE TRIGGER TR_ACTIVITYUPDATE
ON ENROLLMENT
AFTER INSERT,UPDATE,DELETE
AS
BEGIN
INSERT INTO ENROLLMENT_LOG(E_ID,STDID,C_ID,ACTIONS)
SELECT 
E.E_ID,E.STDID,E.C_ID,
'NEW ENROLLMENT'
FROM ENROLLMENT E INNER JOIN INSERTED I ON E.E_ID=I.E_ID
INSERT INTO ENROLLMENT_LOG(E_ID,STDID,C_ID,ACTIONS)
SELECT
I.E_ID,I.STDID,I.C_ID,'UPDATED'
FROM INSERTED I LEFT JOIN DELETED D ON I.E_ID=D.E_ID
INSERT INTO ENROLLMENT_LOG(E_ID,STDID,C_ID,ACTIONS)
SELECT
D.E_ID,D.STDID,D.C_ID,
'DELETED' FROM DELETED D
LEFT JOIN INSERTED I ON D.E_ID=I.E_ID
WHERE I.E_ID IS NULL
END
------------------TRIGGER TO UPDATE ACTIVITY AUTOMATICALLY--------------------
CREATE TRIGGER STATUS_ACTIVITY
ON ENROLLMENT
AFTER UPDATE
AS
BEGIN
UPDATE E
SET ISACTIVE=0
FROM ENROLLMENT E
LEFT JOIN INSERTED I ON E.E_ID=I.E_ID
WHERE I.STATUS='COMPLETED'
UPDATE E
SET ISACTIVE=1
FROM ENROLLMENT E
LEFT JOIN INSERTED I ON E.E_ID=I.E_ID
WHERE I.STATUS='ON PROGRESS'
END
DROP TRIGGER STATUS_ACTIVITY
----------------------CHECK IF TRIIGER WORKS-----------------------
INSERT INTO STUDENT VALUES(121,'FRISH','PYTHON','frishlar1902@gmail.com','2025-01-11','INDIA','TELUGANA',6387650091)
INSERT INTO ENROLLMENT(E_ID,STDID,C_ID,STARTDATE,COMPLETIONPERCENT,STATUS)VALUES('121F',121,1200,'2025-01-30',30,'ONPROGRESS')
------------------CREATE VIEW--------------------
CREATE VIEW STUDENT_INFO
AS
SELECT S.STDID,S.NAME,S.COURSE,S.PHONE,C.C_ID FROM STUDENT S LEFT JOIN COURSE_DETAILS C ON
S.COURSE=C.COURSE
SELECT * FROM STUDENT_INFO
---------------CREATE PAYMENT DETAILS-----------------
CREATE TABLE PAYMENT_DETAILS(STDID INT,NAME VARCHAR(30),C_ID INT,TOT_AMOUNT MONEY,AMOUNT_PAID MONEY DEFAULT 5000)
---------------------INSERT USING SUBQUERY------------------------
INSERT INTO PAYMENT_DETAILS(STDID,NAME,C_ID,TOT_AMOUNT)SELECT S.STDID,S.NAME,C.C_ID,C.PRICE AS TOT_AMOUNT FROM STUDENT S LEFT JOIN
COURSE_DETAILS C ON S.COURSE=C.COURSE
SELECT * FROM PAYMENT_DETAILS
----------------CREATE FUNCTION-----------------
CREATE FUNCTION BALANCE_PAY(@STDID INT)
RETURNS TABLE
AS
RETURN(SELECT STDID,NAME,C_ID,TOT_AMOUNT-AMOUNT_PAID AS BALANCE FROM PAYMENT_DETAILS
WHERE @STDID=STDID)
-----TO EXECUTE-------------
SELECT * from dbo.BALANCE_PAY(111)
-------------TO CREATE PROCEDURE---------------------
CREATE PROCEDURE COURSEPERFORMANCE
AS
BEGIN
SELECT COUNT(E.E_ID) AS TOT_ENROLLMENT,AVG(E.COMPLETIONPERCENT) AS AVGCOMPLETION,COUNT(QA.QUIZID) AS TOT_QUIZ,AVG(QA.SCORE) AS AVGQUIZSCORE,
AVG(F.RATINGS) AS AVGRATINGS FROM ENROLLMENT E LEFT JOIN QUIZATTEMPT QA ON E.STDID= QA.STDID LEFT JOIN FACULTIES
F ON F.C_ID=E.C_ID
END
----------TO EXECUTE--------------------------
EXEC COURSEPERFORMANCE
------------FIND THE STUDENT AT LOW PERFORMANCE
SELECT * FROM ENROLLMENT WHERE STARTDATE<'2025-04-01' AND STATUS='ON PROGRESS' OR COMPLETIONPERCENT<=40
-------------HIGHEST SCORE IN QUIZ------------------
SELECT E.STDID,E.C_ID,S.NAME,QA.QUIZID,QA.SCORE FROM ENROLLMENT E INNER JOIN STUDENT S  ON E.STDID=S.STDID
RIGHT JOIN QUIZATTEMPT QA ON QA.STDID=E.STDID ORDER BY SCORE DESC

SELECT * FROM STUDENT
SELECT * FROM QUIZ
SELECT * FROM QUIZATTEMPT
SELECT * FROM COURSE_DETAILS
SELECT * FROM COURSE_REVIEW
SELECT * FROM PAYMENT_DETAILS




